library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyverse)
theme_set(theme_bw(base_size=12)) # set default ggplot2 theme
# install.packages("ggthemes")
library(ggthemes)
install.packages('ggthemes')
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyverse)
theme_set(theme_bw(base_size=12)) # set default ggplot2 theme
# install.packages("ggthemes")
library(ggthemes)
# make a reduced iris data set that only contains virginica and versicolor species
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
head(iris.small)
glm.out <- glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
summary(glm.out)
glm.out <- glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
summary(glm.out)
glm.out <- glm(Species ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyverse)
theme_set(theme_bw(base_size=12)) # set default ggplot2 theme
# install.packages("ggthemes")
library(ggthemes)
# make a reduced iris data set that only contains virginica and versicolor species
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
head(iris.small)
glm.out <- glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
summary(glm.out)
# Remove Sepal.Length because its p-value is 0.30
glm.out <- glm(Species ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
summary(glm.out)
iris.predicted <- data.frame(iris.small,glm.out$fitted.values,glm.out$linear.predictors)
head(iris.predicted)
iris.predicted <- data.frame(iris.small,glm.out$fitted.values,glm.out$linear.predictors)
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = glm.out.linear.predictors, y = glm.out.fitted.values),color=Species) + geom_density()
?ggplot
iris.predicted <- data.frame(iris.small,prob = glm.out$fitted.values,predictor = glm.out$linear.predictors)
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = predictor, y = prob),color=Species) + geom_density()
iris.predicted <- data.frame(iris.small,prob = glm.out$fitted.values,predictor = glm.out$linear.predictors)
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = predictor, fill = prob),color=Species) + geom_density()
iris.predicted %>% ggplot(aes(x = predictor, fill = prob),color=Species) + geom_point()
iris.predicted %>% ggplot(aes(x = predictor, y = prob),color=Species) + geom_point()
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = predictor, fill = prob),color=Species) + geom_density()
iris.predicted <- data.frame(iris.small,prob = glm.out$fitted.values,predictor = glm.out$linear.predictors)
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = predictor, y = prob),color=Species) + geom_point()
iris.predicted <- data.frame(iris.small,prob = glm.out$fitted.values,predictor = glm.out$linear.predictors)
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = predictor, y = prob, color=Species)) + geom_point()
iris.predicted %>% ggplot(aes(x = predictor, fill = prob, color=Species)) + geom_density()
iris.predicted %>% ggplot(aes(x = predictor, fill = prob, color=Species)) + geom_density2d()
iris.predicted %>% ggplot(aes(x = predictor, fill = prob, color=Species)) + geom_density()
predict(glm.out,plant1, type = 'response')
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyverse)
theme_set(theme_bw(base_size=12)) # set default ggplot2 theme
# install.packages("ggthemes")
library(ggthemes)
# make a reduced iris data set that only contains virginica and versicolor species
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
head(iris.small)
glm.out <- glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
summary(glm.out)
# Remove Sepal.Length because its p-value is 0.30
glm.out <- glm(Species ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
summary(glm.out)
iris.predicted <- data.frame(iris.small,prob = glm.out$fitted.values,predictor = glm.out$linear.predictors)
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = predictor, y = prob, color=Species)) + geom_point()
iris.predicted %>% ggplot(aes(x = predictor, fill = prob, color=Species)) + geom_density()
plant1 <- data.frame(Sepal.Length=6.4, Sepal.Width=2.8, Petal.Length=4.6, Petal.Width=1.8)
plant2 <- data.frame(Sepal.Length=6.3, Sepal.Width=2.5, Petal.Length=4.1, Petal.Width=1.7)
plant3 <- data.frame(Sepal.Length=6.7, Sepal.Width=3.3, Petal.Length=5.2, Petal.Width=2.3)
predict(glm.out,plant1, type = 'response')
predict(glm.out,plant2, type = 'response')
predict(glm.out,plant3, type = 'response')
iris.predicted %>% filter(Species=='virginica' & prob > 0)
iris.predicted %>% filter(Species=='virginica' & prob > 0) %>% n()
# how to pick the best cutoff predictor value? 0 seems good!
iris.predicted %>% filter(Species=='virginica' & prob > 0) %>% summary(n())
# how to pick the best cutoff predictor value? 0 seems good!
iris.predicted %>% filter(Species=='virginica' & prob > 0) %>% summary(correct_virginica=n())
# how to pick the best cutoff predictor value? 0 seems good!
iris.predicted %>% filter(Species=='virginica' & prob > 0) %>%
select(prob) %>%
summary(correct_virginica=n())
# how to pick the best cutoff predictor value? 0 seems good!
iris.predicted %>% filter(Species=='virginica' & prob > 0) %>%
select(prob) %>%
summarize(correct_virginica=n())
# how to pick the best cutoff predictor value? 0 seems good!
iris.predicted %>% filter(Species=='virginica' & prob > 0) %>%
select(prob) %>%
summarize(correct_virginica=n())
iris.predicted %>% filter(Species=='virginica') %>%
summarize(total_virginica=n())
iris.predicted %>% filter(Species=='versicolor' & prob < 0) %>%
select(prob) %>%
summarize(correct_versicolor=n())
iris.predicted %>% filter(Species=='versicolor') %>%
summarize(total_versicolor=n())
iris.predicted %>% filter(Species=='versicolor' & predictor < 0) %>%
select(prob) %>%
summarize(correct_versicolor=n())
iris.predicted %>% filter(Species=='versicolor') %>%
summarize(total_versicolor=n())
# how to pick the best cutoff predictor value? 0 seems good!
iris.predicted %>% filter(Species=='virginica' & predictor > 0) %>%
select(prob) %>%
summarize(correct_virginica=n())
iris.predicted %>% filter(Species=='virginica') %>%
summarize(total_virginica=n())
iris.predicted <- data.frame(iris.small,prob = glm.out$fitted.values,predictor = glm.out$linear.predictors)
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = predictor, y = prob, color=Species)) +
geom_point() +
scale_color_colorblind()
iris.predicted %>% ggplot(aes(x = predictor, fill = prob, color=Species)) +
geom_density() +
scale_color_colorblind()
iris.predicted %>% ggplot(aes(x = predictor, fill=Species)) +
geom_density(alpha=.5) +
scale_color_colorblind()
iris.predicted %>% ggplot(aes(x = predictor, fill=Species)) +
geom_density(alpha=.5) +
scale_color_colorblind()
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyverse)
theme_set(theme_bw(base_size=12)) # set default ggplot2 theme
# install.packages("ggthemes")
library(ggthemes)
# make a reduced iris data set that only contains virginica and versicolor species
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
head(iris.small)
glm.out <- glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
summary(glm.out)
# Remove Sepal.Length because its p-value is 0.30
glm.out <- glm(Species ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris.small,
family = binomial)
summary(glm.out)
iris.predicted <- data.frame(iris.small,prob = glm.out$fitted.values,predictor = glm.out$linear.predictors)
head(iris.predicted)
iris.predicted %>% ggplot(aes(x = predictor, y = prob, color=Species)) +
geom_point() +
scale_color_colorblind()
# plot the line
virg_data <- filter(iris.predicted, Species=='virginica')
vers_data <- filter(iris.predicted, Species=='versicolor')
iris.predicted %>% ggplot(aes(x = predictor, fill=Species)) +
geom_density(alpha=.5) +
scale_color_colorblind()
iris.predicted %>% ggplot(aes(x = predictor, fill=Species)) +
geom_density(alpha=.5) + # how does it know fill the probability? I used 'fill=prob'
scale_color_colorblind() #? color different?
# true positive rate
(49)/50*100
# true negative rate
(48)/50*100
iris.predicted %>% ggplot(aes(x = predictor, fill=Species)) +
geom_density(alpha=.5) +
scale_color_colorblind() #? color different?
?%in%
library(knitr)
opts_chunk$set(fig.align="center", fig.height=6, fig.width=8)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyr)
ais <- read.csv("http://wilkelab.org/classes/SDS348/data_sets/ais.csv")
head(ais)
ais %>% group_by(sport,sex) %>%
summarize(count = n()) %>%
arrange(sport,sex) -> ais.counted
ais.counted
library(knitr)
opts_chunk$set(fig.align="center", fig.height=6, fig.width=8)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyr)
ais <- read.csv("http://wilkelab.org/classes/SDS348/data_sets/ais.csv")
head(ais)
ais %>% group_by(sport,sex) %>%
summarize(count = n()) %>%
arrange(sport,sex) -> ais.counted
ais.counted
sport_name <- read.csv(text="
sport,full_name
Gym,Gymnastics
Tennis,Tennis
T_Sprnt,Track
W_Polo,Water polo
Field,Field
Swim,Swimming
Netball,Netball
B_Ball,Basketball
T_400m,Track
Row,Rowing")
ais %>% left_join(sport_name) %>%
filter(sex=='m') -> ais.male
ais.male %>% group_by(full_name) %>%
summarize(meanBMI=mean(bmi)) -> meanBMI
meanBMI
meanBMI %>% filter(meanBMI==max(meanBMI))
meanBMI %>% filter(meanBMI==min(meanBMI))
# a statistical test between Track and Field
ais.male %>% filter(full_name=='Field') %>%
select(bmi) -> Field
ais.male %>% filter(full_name=='Track') %>%
select(bmi) -> Track
t.test(Field,Track )
# step 1: identify the sports for both sexes
ais.counted %>% group_by(sport) %>%
summarize(count=n()) %>%
filter(count>1) %>%
select(sport) -> sportW2sexes
sportW2sexes # sports for which there is data for both sexes
# step 2: extract all the rows for both sexes
# or use not in c('Gym','Netball','W_Polo') based on the answers to problem 1
ais %>% filter(sport %in% c('B_Ball', 'Field', 'Row', 'Swim', 'T_400m', 'T_Sprnt', 'Tennis')) %>%
select(pcBfat,sex,sport) -> ais.bothSexes
# step 3: plot and visulize the distributions for each sex in different sports
ais.bothSexes %>% # %>% arrange(sport) # order?
ggplot(aes(x=pcBfat, fill=sex)) + geom_density(alpha=0.7) + facet_wrap(~sport)
# ais.bothSexes %>% ggplot(aes(x=pcBfat, fill=sex)) + geom_histogram(alpha=0.7) + facet_wrap(~sport) # not good
# ais.bothSexes %>% ggplot(aes(x=pcBfat, fill=sex)) + geom_freqpoly(alpha=0.7) + facet_wrap(~sport) # not good
# ais.bothSexes %>% ggplot(aes(x=pcBfat, fill=sport)) + geom_density(alpha=0.7) + facet_wrap(~sex) # Another way?
ais.bothSexes %>% ggplot(aes(x=pcBfat, fill=sport)) + geom_density(alpha=0.7) + facet_wrap(~sex)
